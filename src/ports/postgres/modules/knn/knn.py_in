# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

m4_changequote(`<!', `!>')

"""
@file knn.py_in

@brief knn: Driver functions

@namespace knn

@brief knn: Driver functions
"""

import plpy
from utilities.validate_args import table_exists
from utilities.validate_args import table_is_empty
from utilities.validate_args import columns_exist_in_table
from utilities.validate_args import columns_exist_in_table
from utilities.validate_args import is_col_array
from utilities.validate_args import array_col_has_no_null
from utilities.validate_args import get_cols_and_types

STATE_IN_MEM = m4_ifdef(<!__HAWQ__!>, <!True!>, <!False!>)
HAS_FUNCTION_PROPERTIES = m4_ifdef(<!__HAS_FUNCTION_PROPERTIES__!>, <!True!>, <!False!>)
UDF_ON_SEGMENT_NOT_ALLOWED = m4_ifdef(<!__UDF_ON_SEGMENT_NOT_ALLOWED__!>, <!True!>, <!False!>)
# ----------------------------------------------------------------------


def knn_validate_src(schema_madlib, **kwargs):
    trainingSource = kwargs['trainingSource']
    if not trainingSource:
        plpy.error("knn error: Invalid training table name!")
    if not table_exists(trainingSource):
        plpy.error("knn error: Training table {0} does not exist!".format(trainingSource))
    if table_is_empty(trainingSource):
        plpy.error("knn error: Training table {0} is empty!".format(trainingSource))

    testSource = kwargs['testSource']
    if not testSource:
        plpy.error("knn error: Invalid test table name!")
    if not table_exists(testSource):
        plpy.error("knn error: Test table {0} does not exist!".format(testSource))
    if table_is_empty(testSource):
        plpy.error("knn error: Test table {0} is empty!".format(testSource))

    trainingClassColumn = kwargs['trainingClassColumn']
    trainingFeatureColumn = kwargs['trainingFeatureColumn']
    for c in (trainingClassColumn, trainingFeatureColumn):
        if not c:
            plpy.error("knn error: Invalid column name in training table!")
        if not columns_exist_in_table(trainingSource, [c]):
            plpy.error("knn error: " + \
                    "Column '{0}' does not exist in {1}!".format(c, trainingSource))

    testingFeatureColumn = kwargs['testingFeatureColumn']
    testingIdColumn = kwargs['testingIdColumn']
    for c in (testingFeatureColumn, testingIdColumn):
        if not c:
            plpy.error("knn error: Invalid column name in test table!")
        if not columns_exist_in_table(testSource, [c]):
            plpy.error("knn error: " + \
                    "Column '{0}' does not exist in {1}!".format(c, testSource))

    if not is_col_array(trainingSource, trainingFeatureColumn):
        plpy.error("knn error:" + \
                    "'Feature column {0} in train table is not an array!".format(str(trainingFeatureColumn)))
    if not is_col_array(testSource, testingFeatureColumn):
        plpy.error("knn error:" + \
                    "'Feature column {0} in test table is not an array!".format(str(testingFeatureColumn)))

    if not array_col_has_no_null(trainingSource, trainingFeatureColumn):
        plpy.error("knn error:" + \
                    "'Feature column {0} in train table has some NULL values!".format(str(trainingFeatureColumn)))
    if not array_col_has_no_null(testSource, testingFeatureColumn):
        plpy.error("knn error:" + \
                    "'Feature column {0} in test table has some NULL values!".format(str(testingFeatureColumn)))

    k = int(kwargs['K'])
    if k<=0:
        plpy.error("knn error:" + \
                    "'k' {0} is not valid for knn!".format(str(k)))
    bound = plpy.execute("""SELECT {k} <= count(*)
            AS bound FROM {tbl}""".format(k=str(k),
            trainingFeatureColumn=trainingFeatureColumn, tbl=trainingSource))[0]['bound']
    if not bound:
        plpy.error("knn error:" + \
                "'k' {0} is greater than number of rows in training table!".format(str(k)))

    colTypesList = get_cols_and_types(trainingSource)
    colType = ''
    for type in colTypesList:
        if type[0] == trainingClassColumn:
            colType = type[1]
            break
    if colType not in ['INTEGER','integer','double precision','DOUBLE PRECISION','float','FLOAT','boolean','BOOLEAN'] :
        plpy.error("knn error:" + \
                    "Data type {0} is not valid as label for scope of knn!".format(str(colType)))

    colTypesTestList = get_cols_and_types(testSource)
    colType = ''
    for type in colTypesTestList:
        if type[0] == testingIdColumn:
            colType = type[1]
            break
    if colType not in ['INTEGER','integer'] :
        plpy.error("knn error:" + \
                    "Data type {0} is not valid as Id in test table!".format(str(colType)))


# ----------------------------------------------------------------------
m4_changequote(<!`!>, <!'!>)
