/* ----------------------------------------------------------------------- *//**
 *
 * @file perceptron.sql_in
 *
 * @brief SQL functions for perceptron
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')



DROP TYPE IF EXISTS MADLIB_SCHEMA.__perceptron_result CASCADE;
CREATE TYPE MADLIB_SCHEMA.__perceptron_result AS (
    coef            DOUBLE PRECISION[],
    log_likelihood  DOUBLE PRECISION,
    std_err         DOUBLE PRECISION[],
    z_stats         DOUBLE PRECISION[],
    p_values        DOUBLE PRECISION[],
    odds_ratios     DOUBLE PRECISION[],
    vcov            DOUBLE PRECISION[],
    condition_no    DOUBLE PRECISION,
    status          INTEGER,
    num_processed   BIGINT,
    num_iterations  INTEGER
);



------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__perceptron_igd_step_transition(
    DOUBLE PRECISION[],
    BOOLEAN,
    DOUBLE PRECISION[],
    DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME', 'perceptron_igd_step_transition'
LANGUAGE C IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__perceptron_igd_step_merge_states(
    state1 DOUBLE PRECISION[],
    state2 DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME', 'perceptron_igd_step_merge_states'
LANGUAGE C IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');



------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__perceptron_igd_step_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME', 'perceptron_igd_step_final'
LANGUAGE C IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

------------------------------------------------------------------------



/**
 * @internal
 * @brief Perform one iteration of the incremental gradient
 *        method for computing perceptron
 */
DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.__perceptron_igd_step(
    BOOLEAN, DOUBLE PRECISION[], DOUBLE PRECISION[]);
CREATE AGGREGATE MADLIB_SCHEMA.__perceptron_igd_step(
    /*+ y */ BOOLEAN,
    /*+ x */ DOUBLE PRECISION[],
    /*+ previous_state */ DOUBLE PRECISION[]) (

    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.__perceptron_igd_step_transition,
    m4_ifdef(`__POSTGRESQL__', `', `prefunc=MADLIB_SCHEMA.__perceptron_igd_step_merge_states,')
    FINALFUNC=MADLIB_SCHEMA.__perceptron_igd_step_final,
    INITCOND='{0,0,0,0,0}'
);



------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__perceptron_igd_step_distance(
    /*+ state1 */ DOUBLE PRECISION[],
    /*+ state2 */ DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION AS
'MODULE_PATHNAME', 'internal_perceptron_igd_step_distance'
LANGUAGE c IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__perceptron_igd_result(
    /*+ state */ DOUBLE PRECISION[])
RETURNS MADLIB_SCHEMA.__perceptron_result AS
'MODULE_PATHNAME', 'internal_perceptron_igd_result'
LANGUAGE c IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train (
    arg1        VARCHAR
) RETURNS VOID AS $$

BEGIN
    IF arg1 = 'help' OR arg1 = 'usage' OR arg1 = '?' THEN
        RAISE NOTICE
'
------------------------
            USAGE
------------------------

select * from madlib.perceptron_train(
training_table,     —- Training data table having training features as vector column and labels
output_table,            —- Name of output table
dep_var,                —- The dependent variable 
QUOTE array[1,x1,x2] UNQUOTE,       —- Input Feature Vector with bias
max_iter,               —- Maximum number of iterations of the perceptron algorithm that the user wants to run before stopping it
tolerance               —- Tolerance for the stopping criteria of the algorithm
);   

-------------------------
          OUTPUT
-------------------------
The output of the perceptron module is a table with the following columns:
coef                     —-  Vector of the coefficients of the perceptron algorithm
log_likelihood           —-  The log-likelihood 
num_iterations           —-  The number of iterations actually completed  by the algorithm

and some other unimportant diagnostic information
';
    END IF;
END;
$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `READS SQL DATA', `');

------------------------------------------------------------------------






CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train (
    source_table        VARCHAR,
    out_table           VARCHAR,
    dependent_varname   VARCHAR,
    independent_varname VARCHAR,
    max_iter            INTEGER,
    tolerance           DOUBLE PRECISION
    
) RETURNS VOID AS $$
PythonFunction(perceptron, perceptron, perceptron_train)
$$ LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train (
    source_table        VARCHAR,
    out_table           VARCHAR,
    dependent_varname   VARCHAR,
    independent_varname VARCHAR)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.perceptron_train($1, $2, $3, $4, 20, 0.0001);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train (
    source_table        VARCHAR,
    out_table           VARCHAR,
    dependent_varname   VARCHAR,
    independent_varname VARCHAR,
    max_iter            INTEGER)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.perceptron_train($1, $2, $3, $4, $5, 0.0001);
$$LANGUAGE sql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

------------------------------------------------------------------------


-- Help messages -------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train(
    message    TEXT
) RETURNS TEXT AS $$
    PythonFunction(perceptron, perceptron, perceptron_help_msg)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_train()
RETURNS TEXT
AS $$
    SELECT MADLIB_SCHEMA.perceptron_train(NULL::TEXT);
$$ LANGUAGE SQL IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');
------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron(x DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS $$
   SELECT CASE WHEN -$1 < -37 THEN 1
               WHEN -$1 > 709 THEN 0
               ELSE 1 / (1 + exp(-$1))
          END;
$$ LANGUAGE sql IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');

-------------------------------------------------------------------------
-- perceptron: Prediction ---------------------------------------------


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict(
    coef            DOUBLE PRECISION[],
    col_ind_var     DOUBLE PRECISION[]
) RETURNS BOOLEAN
AS 'MODULE_PATHNAME', 'perceptron_predict'
LANGUAGE C STRICT IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

-- Help messages -------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict(
    message    TEXT
) RETURNS TEXT AS $$
    PythonFunction(perceptron, perceptron, perceptron_predict_help)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict()
RETURNS TEXT
AS $$
    SELECT MADLIB_SCHEMA.perceptron_predict(''::TEXT);
$$ LANGUAGE SQL IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');
-------------------------------------------------------------



CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict_prob(
    coef            DOUBLE PRECISION[],
    col_ind_var     DOUBLE PRECISION[]
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME', 'perceptron_predict_prob'
LANGUAGE C STRICT IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

-- Help messages -------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict_prob(
    message    TEXT
) RETURNS TEXT AS $$
    PythonFunction(perceptron, perceptron, perceptron_predict_prob_help)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.perceptron_predict_prob()
RETURNS TEXT
AS $$
    SELECT MADLIB_SCHEMA.perceptron_predict_prob(''::TEXT);
$$ LANGUAGE SQL IMMUTABLE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `CONTAINS SQL', `');

-------------------------------------------------------------